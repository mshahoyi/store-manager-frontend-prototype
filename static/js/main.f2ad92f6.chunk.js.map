{"version":3,"sources":["components/Menu/Menu.module.css","components/StoreCard/StoreCard.module.css","scenes/Stores.module.css","components/PaginationTable/PaginationTable.module.css","api/base.ts","api/storeApi.ts","components/Button.tsx","components/StoreCard/StoreCard.tsx","components/Container.tsx","scenes/Stores.tsx","scenes/StoreUpsert.tsx","components/Menu/Menu.tsx","redux/actions.ts","redux/reducer.ts","utils/modelHelpers.ts","redux/store.ts","api/categoryApi.ts","api/productApi.ts","utils/sharedUtils.ts","components/PaginationTable/PaginationTable.tsx","scenes/TablePage/TablePage.tsx","components/Autocomplete/Autocomplete.tsx","scenes/UpsertPage/UpsertPage.tsx","scenes/StoreMain.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","axios","defaults","baseURL","process","REACT_APP_BASE_URL","BaseApi","resource","this","object","formData","FormData","Object","keys","forEach","key","append","storeId","get","url","then","response","data","id","convertToFormData","post","patch","delete","storeApi","Button","styled","button","props","disabled","css","secondary","StoreCard","store","onDelete","rest","history","useHistory","to","style","display","className","styles","card","src","logo","width","height","title","name","buttonContainer","onClick","event","stopPropagation","preventDefault","e","push","Container","div","Stores","useState","stores","setStores","loading","setLoading","useEffect","fetchData","list","finally","deleteStore","header","paddingBlock","map","withFormik","handleSubmit","values","setSubmitting","setValues","setStore","useParams","Number","onSubmit","onChange","target","value","onBlur","handleBlur","undefined","errors","touched","File","URL","createObjectURL","type","files","isSubmitting","connector","connect","state","location","useLocation","productsPath","categoriesPath","activeClass","path","RegExp","test","pathname","active","ul","routes","marginInline","li","a","float","ActionTypes","Model","defaultState","createStore","action","payload","categoryApi","getState","catch","err","productApi","formatDate","Date","getDay","getMonth","getFullYear","getHours","getMinutes","date","getValueAtKeyPath","keyPath","throwIfNotFound","split","reduce","previous","current","i","arr","console","error","Error","splice","setValueAtKeyPath","ref","length","modelDataTable","category","dataTable","product","productHeaders","text","createdAt","categoryHeaders","modelDatatableHeaders","productUpsertFields","label","itemText","itemValue","items","categoryUpsertFields","PaginationTable","headers","actions","requestPage","getValue","item","headerRow","headerCell","results","textAlign","backgroundColor","marginBlock","color","first","prev","next","last","TablePage","model","setData","fetchError","setError","fetcher","toString","handleDelete","primary","href","r","modelItem","Autocomplete","isShowingSuggestions","setShowingSuggestions","suggestions","setSuggestions","setText","find","filterSuggestions","filteredSuggestions","filter","onFocus","parentOnFocus","onInput","suggestion","dataFetcher","fields","setItems","setFetchError","submitFeedback","setSubmitFeedback","requests","fetchItems","unshift","Promise","all","f","field","array","renderField","htmlFor","handleChange","alt","handleFileChange","handleAutocompleteChange","newValues","submitUpdate","submitCreate","goBack","dispatch","exact","render","isNaN","resolve","App","component","StoreUpsert","StoreMain","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2ad92f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ul\":\"Menu_ul__3MYwU\",\"li\":\"Menu_li__Rq6oY\",\"a\":\"Menu_a__3NkiW\",\"routes\":\"Menu_routes__C0yji\",\"active\":\"Menu_active__3ax4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"StoreCard_card__2yivO\",\"title\":\"StoreCard_title__3DqPH\",\"buttonContainer\":\"StoreCard_buttonContainer__3MRnK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Stores_header__3s2hR\",\"card\":\"Stores_card__13wrn\",\"loading\":\"Stores_loading__1kkTy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerCell\":\"PaginationTable_headerCell__1WzHu\",\"headerRow\":\"PaginationTable_headerRow__dTjI4\"};","import { ApiPaginatedData } from \"../types/sharedTypes\";\nimport axios from \"axios\";\n\naxios.defaults.baseURL = process.env.REACT_APP_BASE_URL;\n\nexport default class BaseApi<Model extends unknown> {\n  resource: String;\n\n  get url() {\n    return \"/api/v1/\" + this.resource + \"/\";\n  }\n\n  constructor(resource: string) {\n    this.resource = resource;\n  }\n\n  convertToFormData(object: Record<string, unknown>): FormData {\n    const formData = new FormData();\n    Object.keys(object).forEach((key) =>\n      formData.append(key, object[key] as string)\n    );\n    return formData;\n  }\n\n  dataTable(storeId?: number): Promise<ApiPaginatedData<Model>> {\n    return axios\n      .get(this.url + (storeId || \"\"))\n      .then((response) => response.data);\n  }\n\n  get(id: number): Promise<Model> {\n    return axios.get(this.url + id).then((response) => response.data);\n  }\n\n  post(data: Model, storeId?: number): Promise<Model> {\n    if (storeId) {\n      (data as { storeId: number }).storeId = storeId;\n    }\n    const formData = this.convertToFormData(data as Record<string, unknown>);\n    return axios.post(this.url, formData).then((response) => response.data);\n  }\n\n  patch(id: number, data: Model, storeId?: number): Promise<Model> {\n    if (storeId) {\n      (data as { storeId: number }).storeId = storeId;\n    }\n    const formData = this.convertToFormData(data as Record<string, unknown>);\n    return axios\n      .patch(this.url + id, formData)\n      .then((response) => response.data);\n  }\n\n  delete(id: number): Promise<Model> {\n    return axios.delete(this.url + id).then((response) => response.data);\n  }\n}\n","import BaseApi from \"./base\";\nimport { Store } from \"../types/storeTypes\";\n\nclass StoreApi extends BaseApi<Store> {\n  constructor() {\n    super(\"stores\");\n  }\n\n  list() {\n    return super.dataTable() as unknown as Promise<Store[]>;\n  }\n}\n\nexport const storeApi = new StoreApi();\n","import styled, { css } from \"styled-components\";\n\nexport const Button = styled.button<ButtonProps>`\n  cursor: pointer;\n  background: cornflowerblue;\n  color: white;\n\n  ${(props) =>\n    props.disabled &&\n    css`\n      opacity: 0.38;\n    `}\n\n  margin: 4px;\n  padding: 12px 24px;\n  border-radius: 3px;\n  border: none;\n\n  ${(props) =>\n    props.secondary &&\n    css`\n      background: transparent;\n      border: 2px solid cornflowerblue;\n      color: cornflowerblue;\n    `}\n`;\n\ntype ButtonProps = {\n  primary?: boolean;\n  secondary?: boolean;\n};\n","import { Store } from \"../../types/storeTypes\";\nimport { Link } from \"react-router-dom\";\nimport styles from \"./StoreCard.module.css\";\nimport { Button } from \"../Button\";\nimport { useHistory } from \"react-router-dom\";\n\nexport function StoreCard({\n  store,\n  onDelete,\n  ...rest\n}: {\n  store: Store;\n  onDelete: (id: number) => void;\n  [rest: string]: unknown;\n}) {\n  const history = useHistory();\n\n  return (\n    <>\n      <Link\n        to={\"/store/\" + store.id}\n        {...rest}\n        style={{ display: \"inline-block\" }}\n      >\n        <div className={styles.card}>\n          <img src={store.logo as string} width=\"100%\" height=\"200px\" />\n          <h3 className={styles.title}>{store.name}</h3>\n          <div className={styles.buttonContainer}>\n            <Button\n              onClick={(event) => {\n                event.stopPropagation();\n                event.preventDefault();\n                onDelete(store.id);\n              }}\n            >\n              Delete\n            </Button>\n            <Button\n              secondary\n              onClick={(e) => {\n                e.preventDefault();\n                history.push(\"/upsert-store/\" + store.id);\n              }}\n            >\n              Edit\n            </Button>\n          </div>\n        </div>\n      </Link>\n    </>\n  );\n}\n\nexport type StoreCardProps = Parameters<typeof StoreCard>[0];\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  text-align: center;\n  padding-inline: 100px;\n`;\n","import { useEffect, useState } from \"react\";\nimport { Store } from \"../types/storeTypes\";\nimport { storeApi } from \"../api/storeApi\";\nimport { Link } from \"react-router-dom\";\nimport StoreCard from \"../components/StoreCard\";\nimport { Button } from \"../components/Button\";\nimport { Container } from \"../components/Container\";\nimport styles from \"./Stores.module.css\";\n\nexport default function Stores() {\n  const [stores, setStores] = useState<Store[]>([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = () => {\n    storeApi\n      .list()\n      .then((stores) => setStores(stores))\n      .finally(() => setLoading(false));\n  };\n\n  const deleteStore = (id: number) => {\n    setLoading(true);\n    storeApi\n      .delete(id)\n      .then(() => fetchData())\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <Container>\n      <h3 className={styles.header}> Select Store Below... Or </h3>\n      <Link to=\"/upsert-store\">\n        <Button>Add Store</Button>\n      </Link>\n\n      {loading && <h3 className={styles.loading}>Loading...</h3>}\n\n      <div className=\"text-start\" style={{ paddingBlock: 24 }}>\n        {stores.map((store) => (\n          <StoreCard\n            key={store.id}\n            store={store}\n            onDelete={deleteStore}\n            className={\"col-4 col-md-3 col-lg-2 \" + styles.card}\n          />\n        ))}\n      </div>\n    </Container>\n  );\n}\n","// Render Prop\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Formik, FormikProps, withFormik } from \"formik\";\nimport { storeApi } from \"../api/storeApi\";\nimport { Store } from \"../types/storeTypes\";\nimport { useParams } from \"react-router-dom\";\n\nconst StoreUpsert = ({ values, setValues, ...rest }: FormikProps<Store>) => {\n  const [loading, setLoading] = useState(false);\n  const [store, setStore] = useState({} as Store);\n  const { id } = useParams<{ id?: string }>();\n  const storeId = Number(id);\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      storeApi\n        .get(storeId)\n        .then((store) => {\n          setStore(store);\n          setValues({ id: store.id } as Store);\n        })\n        .finally(() => setLoading(false));\n    }\n  }, []);\n\n  return (\n    <div>\n      {loading && <h3>Loading...</h3>}\n      <form onSubmit={rest.handleSubmit}>\n        <div>\n          <input\n            name=\"name\"\n            onChange={(e) => setValues({ ...values, name: e.target.value })}\n            onBlur={rest.handleBlur}\n            value={values.name === undefined ? store.name || \"\" : values.name}\n          />\n          {rest.errors.name && rest.touched.name && rest.errors.name}\n        </div>\n        <div>\n          <img\n            src={\n              values.logo instanceof File\n                ? URL.createObjectURL(values.logo)\n                : (store.logo as string)\n            }\n            width=\"300\"\n            height=\"200\"\n          />\n        </div>\n        <div>\n          <input\n            type=\"file\"\n            name=\"logo\"\n            onChange={(e) =>\n              setValues({ ...values, logo: e.target.files?.[0] || null })\n            }\n            onBlur={rest.handleBlur}\n          />\n          {rest.errors.logo && rest.touched.logo && rest.errors.logo}\n        </div>\n        <button type=\"submit\" disabled={rest.isSubmitting}>\n          Submit\n        </button>\n      </form>\n      {rest.isSubmitting && <h3>Submitting...</h3>}\n    </div>\n  );\n};\n\nexport default withFormik<{}, Store>({\n  handleSubmit(values, { setSubmitting }) {\n    setSubmitting(true);\n    if (values.id) {\n      storeApi.patch(values.id, values).finally(() => setSubmitting(false));\n    } else {\n      storeApi.post(values).finally(() => setSubmitting(false));\n    }\n  },\n})(StoreUpsert);\n","import { AppState } from \"../../redux/store\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport styles from \"./Menu.module.css\";\n\nfunction Menu({ store }: ReduxProps) {\n  const location = useLocation();\n\n  const productsPath = `/store/${store?.id}/products`;\n  const categoriesPath = `/store/${store?.id}/categories`;\n\n  const activeClass = (path: string) =>\n    new RegExp(path).test(location.pathname) && styles.active;\n\n  return (\n    <ul className={styles.ul}>\n      <div className={styles.routes}>\n        <img\n          width=\"60\"\n          height=\"40\"\n          src={(store || {}).logo as string}\n          style={{ marginInline: 12 }}\n        />\n        <li className={styles.li}>\n          <Link\n            className={`${styles.a} ${activeClass(productsPath)}`}\n            to={productsPath}\n          >\n            Products\n          </Link>\n        </li>\n        <li className={styles.li}>\n          <Link\n            className={`${styles.a} ${activeClass(categoriesPath)}`}\n            to={categoriesPath}\n          >\n            Categories\n          </Link>\n        </li>\n      </div>\n      <li className={styles.li} style={{ float: \"right\" }}>\n        <Link className={styles.a} to=\"/\">\n          Sign out\n        </Link>\n      </li>\n    </ul>\n  );\n}\n\nconst connector = connect((state: AppState) => ({ store: state.store }));\ntype ReduxProps = ConnectedProps<typeof connector>;\nexport default connector(Menu);\n","import { Store } from \"../types/storeTypes\";\n\nexport const ActionTypes = {\n  USE_STORE: \"use_store\",\n};\n\nexport const setStore = (store: Store) => ({\n  type: ActionTypes.USE_STORE,\n  payload: store,\n});\n","import { Store } from \"../types/storeTypes\";\nimport { ActionTypes } from \"./actions\";\n\nexport default function reducer(\n  state = defaultState,\n  action: { type: string; payload: unknown }\n) {\n  switch (action.type) {\n    case ActionTypes.USE_STORE:\n      return { ...state, store: action.payload as Store };\n\n    default:\n      return state;\n  }\n}\n\nexport const defaultState = {\n  store: null as Store | null,\n};\n","import { categoryApi } from \"../api/categoryApi\";\nimport { productApi } from \"../api/productApi\";\nimport { Category } from \"../types/categoryTypes\";\nimport { Product } from \"../types/productTypes\";\nimport { ApiPaginatedData } from \"../types/sharedTypes\";\nimport { PaginationTableHeader } from \"../components/PaginationTable/PaginationTable\";\nimport { formatDate } from \"./sharedUtils\";\nimport { FormField } from \"../scenes/UpsertPage/UpsertPage\";\n\nexport enum Model {\n  product = \"product\",\n  category = \"category\",\n}\n\nexport const modelDataTable: Record<\n  Model,\n  () => Promise<ApiPaginatedData<unknown>>\n> = {\n  [Model.category]: () => categoryApi.dataTable(),\n  [Model.product]: () => productApi.dataTable(),\n};\n\nexport const productHeaders: PaginationTableHeader<Product>[] = [\n  { text: \"Name\", value: \"name\" },\n  { text: \"Price\", value: \"price\" },\n  { text: \"Category\", value: \"category.name\" },\n  { text: \"Created At\", value: (product) => formatDate(product.createdAt) },\n];\n\nexport const categoryHeaders: PaginationTableHeader<Category>[] = [\n  { text: \"Name\", value: \"name\" },\n  { text: \"Created At\", value: (product) => formatDate(product.createdAt) },\n];\n\nexport const modelDatatableHeaders: Record<\n  Model,\n  PaginationTableHeader<unknown>[]\n> = {\n  [Model.product]: productHeaders as never,\n  [Model.category]: categoryHeaders as never,\n};\n\nexport const productUpsertFields: FormField<Product>[] = [\n  { type: \"text\", label: \"Name\", name: \"name\" },\n  { type: \"number\", label: \"Price\", name: \"price\" },\n  { type: \"file\", label: \"Image\", name: \"image\" },\n  {\n    type: \"pointer\",\n    label: \"Category\",\n    name: \"categoryId\",\n    itemText: \"name\",\n    itemValue: \"id\",\n    items: () => categoryApi.list(),\n  },\n];\n\nexport const categoryUpsertFields: FormField<Category>[] = [\n  { type: \"text\", label: \"Name\", name: \"name\" },\n  { type: \"file\", label: \"Image\", name: \"image\" },\n];\n","import { createStore } from \"redux\";\nimport reducer, { defaultState } from \"./reducer\";\n\nconst store = createStore(\n  reducer,\n  process.env.NODE_ENV !== \"production\" &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__ &&\n    (window as any).__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport type AppState = typeof defaultState;\n\nexport default store;\n","import BaseApi from \"./base\";\nimport { Category } from \"../types/categoryTypes\";\nimport store from \"redux/store\";\nimport axios from \"axios\";\nimport { ApiPaginatedData } from \"../types/sharedTypes\";\n\nclass CategoryApi extends BaseApi<Category> {\n  constructor() {\n    super(\"categories\");\n  }\n\n  dataTable(): Promise<ApiPaginatedData<Category>> {\n    const storeId = store.getState().store?.id;\n    return super.dataTable(storeId);\n  }\n\n  list(): Promise<Category[]> {\n    return axios\n      .get(this.url + \"list/\" + store.getState().store?.id)\n      .then((response) => response.data)\n      .catch((err) => {\n        throw err.data;\n      });\n  }\n}\n\nexport const categoryApi = new CategoryApi();\n","import BaseApi from \"./base\";\nimport { Product } from \"../types/productTypes\";\nimport { ApiPaginatedData } from \"../types/sharedTypes\";\nimport store from \"../redux/store\";\n\nclass ProductApi extends BaseApi<Product> {\n  constructor() {\n    super(\"products\");\n  }\n\n  dataTable(): Promise<ApiPaginatedData<Product>> {\n    const storeId = store.getState().store?.id;\n    return super.dataTable(storeId);\n  }\n\n  post(data: Product): Promise<Product> {\n    const storeId = store.getState().store?.id;\n    return super.post(data, storeId);\n  }\n\n  patch(id: number, data: Product): Promise<Product> {\n    const storeId = store.getState().store?.id;\n    return super.patch(id, data, storeId);\n  }\n}\n\nexport const productApi = new ProductApi();\n","export const formatDate = (value: string | Date) => {\n  if (value instanceof Date) {\n    return `${value.getDay()}/${value.getMonth()}/${value.getFullYear()} ${value.getHours()}:${value.getMinutes()}`;\n  } else if (typeof value === \"string\") {\n    const date = new Date(value);\n    return `${date.getDay()}/${date.getMonth()}/${date.getFullYear()} ${date.getHours()}:${date.getMinutes()}`;\n  } else {\n    return value;\n  }\n};\n\nexport function getValueAtKeyPath(\n  object: Record<string, unknown>,\n  keyPath: string,\n  throwIfNotFound = false\n): unknown {\n  const split = keyPath.split(\".\");\n\n  return split.reduce((previous: unknown, current, i, arr) => {\n    if (typeof previous !== \"object\" || previous === null) {\n      if (throwIfNotFound) {\n        console.error(\"input object\", object);\n        console.error(\"key path\", keyPath);\n        throw new Error(\n          \"can get value at a key path that which has a non object value in the path\"\n        );\n      } else {\n        arr.splice(1); // eject from the reduce\n        return null;\n      }\n    }\n    return (previous as Record<string, unknown>)[current];\n  }, object);\n}\n\nexport function setValueAtKeyPath(\n  object: Record<string, unknown>,\n  keyPath: string,\n  value: unknown\n): void {\n  const keys = keyPath.split(\".\");\n  let ref = object;\n  keys.forEach((key, i) => {\n    // if this is the last key, assign the key to the value\n    if (i === keys.length - 1) {\n      ref[key] = value;\n    } else {\n      // if the key on the object is undefined or null, assign object\n      if (object[key] === undefined || object[key] === null) {\n        object[key] = {};\n      }\n\n      // hold a reference to the current path on object\n      ref = object[key] as Record<string, unknown>;\n    }\n  });\n}\n","import styles from \"./PaginationTable.module.css\";\nimport { getValueAtKeyPath } from \"../../utils/sharedUtils\";\nimport { ApiPaginatedData } from \"../../types/sharedTypes\";\nimport { useState } from \"react\";\n\nconst itemsPerPage = 5;\n\nexport default function PaginationTable({\n  headers,\n  data,\n  loading,\n  actions,\n  requestPage,\n}: {\n  headers: PaginationTableHeader<unknown>[];\n  data?: ApiPaginatedData<unknown>;\n  loading?: boolean;\n  actions?: (item: unknown) => JSX.Element;\n  requestPage: (href?: string | null) => void;\n}) {\n  const [currentPage, setCurrentPage] = useState();\n\n  const getValue = (\n    item: unknown,\n    value: string | ((item: unknown) => unknown)\n  ) => {\n    if (typeof value === \"function\") {\n      return value(item);\n    } else if (typeof value === \"string\") {\n      return getValueAtKeyPath(item as Record<string, unknown>, value);\n    } else {\n      return value;\n    }\n  };\n\n  const pageNoArray = () => {\n    if (data?.count) {\n      const numberOfPages = Math.ceil(data.count / itemsPerPage);\n      return Array.from(Array(numberOfPages).keys()).map((n) => n + 1);\n    }\n    return [1];\n  };\n\n  return (\n    <>\n      <table>\n        <thead>\n          <tr className={styles.headerRow}>\n            {headers.map((header) => (\n              <th key={header.text} className={styles.headerCell}>\n                {header.text}\n              </th>\n            ))}\n            <th className={styles.headerCell}>Actions</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {data?.results?.map((item, i) => (\n            <tr key={i}>\n              {headers.map((header, i) => (\n                <td key={i}>{getValue(item, header.value) as string}</td>\n              ))}\n              {actions && <td>{actions(item)}</td>}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {/*  Pagination */}\n      <div\n        style={{\n          textAlign: \"start\",\n          backgroundColor: \"lightcyan\",\n          marginBlock: 24,\n        }}\n      >\n        Pages\n        <div style={{ marginBlock: 12 }}>\n          <span\n            style={{ marginInline: 12, color: data?.first ? \"black\" : \"gray\" }}\n            onClick={() => requestPage(data?.first)}\n          >\n            First\n          </span>\n\n          <span\n            style={{ marginInline: 12, color: data?.prev ? \"black\" : \"gray\" }}\n            onClick={() => requestPage(data?.prev)}\n          >\n            Prev\n          </span>\n          <span\n            style={{ marginInline: 12, color: data?.next ? \"black\" : \"gray\" }}\n            onClick={() => requestPage(data?.next)}\n          >\n            Next\n          </span>\n          <span\n            style={{ marginInline: 12, color: data?.last ? \"black\" : \"gray\" }}\n            onClick={() => requestPage(data?.last)}\n          >\n            Last\n          </span>\n        </div>\n      </div>\n      {loading && <h5>Loading...</h5>}\n    </>\n  );\n}\n\nexport interface PaginationTableHeader<T> {\n  value: keyof T | string | ((item: T) => string | number | undefined | null);\n  text: string;\n}\n","import {\n  Model,\n  modelDataTable,\n  modelDatatableHeaders,\n} from \"../../utils/modelHelpers\";\nimport { useEffect, useState } from \"react\";\nimport { ApiPaginatedData } from \"../../types/sharedTypes\";\nimport { Category } from \"../../types/categoryTypes\";\nimport { Product } from \"../../types/productTypes\";\nimport PaginationTable from \"../../components/PaginationTable\";\nimport { Button } from \"../../components/Button\";\nimport { Link, useHistory, useLocation } from \"react-router-dom\";\nimport { categoryApi } from \"../../api/categoryApi\";\nimport { productApi } from \"../../api/productApi\";\nimport axios from \"axios\";\n\nexport default function TablePage({ model }: { model: Model }) {\n  const history = useHistory();\n  const location = useLocation();\n  const [data, setData] = useState({} as ApiPaginatedData<Category | Product>);\n  const [loading, setLoading] = useState(true);\n  const [fetchError, setError] = useState(null as null | string);\n\n  useEffect(() => {\n    fetchData(modelDataTable[model]);\n  }, [model]);\n\n  const fetchData = (fetcher: () => Promise<ApiPaginatedData<unknown>>) => {\n    setLoading(true);\n    fetcher()\n      .then((data) => {\n        setData(data as ApiPaginatedData<Category & Product>);\n        setError(null);\n      })\n      .catch((e) => {\n        setError(e.toString());\n      })\n      .finally(() => setLoading(false));\n  };\n\n  const handleDelete = async (item: Category | Product) => {\n    setLoading(true);\n    setError(null);\n    try {\n      if (model === Model.category) await categoryApi.delete(item.id);\n      else await productApi.delete(item.id);\n      fetchData(modelDataTable[model]);\n    } catch (e) {\n      setError(e.toString());\n      setLoading(false);\n    }\n  };\n\n  const handlePageChange = (href?: string | null) => {\n    if (href) {\n      fetchData(() => axios.get(href).then((r) => r.data));\n    }\n  };\n\n  return (\n    <>\n      <div style={{ textAlign: \"end\" }}>\n        <Link to={`${location.pathname}/${model}-upsert`}>\n          <Button primary>Add</Button>\n        </Link>\n      </div>\n\n      <PaginationTable\n        headers={modelDatatableHeaders[model]}\n        data={data}\n        loading={loading}\n        requestPage={handlePageChange}\n        actions={(item) => {\n          const modelItem = item as Category | Product;\n\n          return (\n            <div>\n              <Button\n                primary\n                onClick={() =>\n                  history.push(\n                    `${location.pathname}/${model}-upsert/${modelItem.id}`\n                  )\n                }\n              >\n                Edit\n              </Button>\n              <Button secondary onClick={() => handleDelete(modelItem)}>\n                Delete\n              </Button>\n            </div>\n          );\n        }}\n      />\n      {fetchError && <h5>{fetchError}</h5>}\n    </>\n  );\n}\n","import { ChangeEvent, useEffect, useState } from \"react\";\nimport { getValueAtKeyPath } from \"utils/sharedUtils\";\n\nfunction Autocomplete<T extends Record<string, unknown>>({\n  items,\n  itemText,\n  itemValue,\n  onChange,\n  value,\n  ...rest\n}: {\n  items: T[];\n  value: unknown;\n  itemText: string;\n  itemValue: string;\n  onChange: (value: unknown) => void;\n  [others: string]: unknown;\n}) {\n  const [isShowingSuggestions, setShowingSuggestions] = useState(false);\n  const [suggestions, setSuggestions] = useState([] as T[]);\n  const [text, setText] = useState(\"\" as string);\n\n  useEffect(() => {\n    const item = items.find((i) => getValueAtKeyPath(i, itemValue) === value);\n    if (item) {\n      setText(getValueAtKeyPath(item, itemText) as string);\n    }\n  }, [value]);\n\n  const handleFocus = (event: ChangeEvent<HTMLInputElement>) => {\n    const parentOnFocus = rest.onFocus as (event: ChangeEvent) => void;\n    parentOnFocus && parentOnFocus(event);\n    // show suggestions\n    setShowingSuggestions(true);\n    filterSuggestions(event.target.value as string);\n  };\n\n  const handleTextChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setShowingSuggestions(true);\n    setText(event.target.value);\n    const onInput = rest.onInput as (event: ChangeEvent) => void;\n    onInput && onInput(event);\n    // filter suggestions\n    filterSuggestions(event.target.value as string);\n  };\n\n  const filterSuggestions = (value: string) => {\n    const filteredSuggestions = items.filter((item) => {\n      const text = getValueAtKeyPath(item, itemText);\n      const matches = new RegExp(value, \"gi\").test(text as string);\n      return matches;\n    });\n    setSuggestions(filteredSuggestions);\n  };\n\n  return (\n    <>\n      <input\n        onFocus={handleFocus}\n        onChange={handleTextChange}\n        {...rest}\n        value={text}\n      />\n      {isShowingSuggestions && (\n        <ul>\n          {suggestions.map((suggestion, i) => (\n            <li\n              key={i}\n              onClick={() => {\n                onChange(getValueAtKeyPath(suggestion, itemValue));\n                setShowingSuggestions(false);\n              }}\n            >\n              {getValueAtKeyPath(suggestion, itemText) as string}\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n}\n\nexport default Autocomplete;\n","import { useHistory, useParams } from \"react-router-dom\";\nimport { ChangeEvent, FormEvent, useEffect, useState } from \"react\";\nimport { FormikProps, withFormik } from \"formik\";\nimport { setValueAtKeyPath } from \"../../utils/sharedUtils\";\nimport Autocomplete from \"components/Autocomplete\";\nimport { Button } from \"components/Button\";\n\nfunction UpsertPage({\n  dataFetcher,\n  fields,\n  values,\n  setValues,\n  setSubmitting,\n  ...rest\n}: UpsertPageProps & FormikProps<Record<string, unknown>>) {\n  const history = useHistory();\n  const { id } = useParams<{ id?: string }>();\n  const [loading, setLoading] = useState(false);\n  const [items, setItems] = useState(\n    {} as Record<string, Record<string, unknown>[]>\n  );\n  const [fetchError, setFetchError] = useState(null as string | null);\n  const [data, setData] = useState({} as Record<string, unknown>);\n  const [submitFeedback, setSubmitFeedback] = useState(\"\" as string);\n\n  useEffect(() => {\n    // fetch item for pointer fields\n    const requests = fetchItems();\n\n    if (id) {\n      requests.unshift(fetchData());\n    }\n\n    setLoading(true);\n    Promise.all(requests).finally(() => setLoading(false));\n  }, []);\n\n  const fetchItems = () => {\n    return (\n      fields\n        // obly pointer fields need item fetching\n        .filter((f) => typeof f.items === \"function\")\n        .map((field) =>\n          field.items!().then((array) =>\n            setItems({ ...items, [field.name]: array })\n          )\n        )\n    );\n  };\n\n  const fetchData = async () => {\n    try {\n      const data = await dataFetcher(Number(id));\n      setFetchError(null);\n      setData(data as never);\n    } catch (e) {\n      setFetchError(e.toString());\n    }\n  };\n\n  function renderField<T>(field: FormField<T>) {\n    switch (field.type) {\n      case \"number\":\n      case \"text\":\n        return (\n          <div key={field.name as string}>\n            <label htmlFor={field.name as string}>{field.label}</label>\n            <input\n              value={\n                values[field.name as string] === undefined\n                  ? (data[field.name as string] as string) || \"\"\n                  : (values[field.name as string] as string)\n              }\n              onChange={handleChange}\n              onBlur={rest.handleBlur}\n              name={field.name as string}\n              type={field.type}\n            />\n          </div>\n        );\n\n      case \"file\":\n        return (\n          <div key={field.name as string}>\n            <img\n              src={\n                values[field.name as string] instanceof File\n                  ? URL.createObjectURL(values[field.name as string])\n                  : (data[field.name as string] as string)\n              }\n              width=\"300\"\n              height=\"200\"\n              alt=\"preview\"\n              style={{ display: \"block\" }}\n            />\n            <input\n              type=\"file\"\n              name={field.name as string}\n              onChange={handleFileChange}\n              onBlur={rest.handleBlur}\n            />\n          </div>\n        );\n\n      case \"pointer\":\n        return (\n          <div key={field.name as string}>\n            <label htmlFor={field.name as string}>{field.label}</label>\n            <Autocomplete\n              items={items[field.name as string] || []}\n              itemText={field.itemText!}\n              itemValue={field.itemValue!}\n              value={\n                values[field.name as string] === undefined\n                  ? (data[field.name as string] as string) || \"\"\n                  : (values[field.name as string] as string)\n              }\n              onChange={(value) =>\n                handleAutocompleteChange(field.name as string, value)\n              }\n            />\n          </div>\n        );\n\n      default:\n        return <h6>Not supported yet</h6>;\n    }\n  }\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const newValues = { ...values };\n    setValueAtKeyPath(newValues, event.target.name, event.target.value);\n    setValues(newValues);\n  };\n\n  const handleFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const newValues = { ...values };\n    setValueAtKeyPath(newValues, event.target.name, event.target.files?.[0]);\n    setValues(newValues);\n  };\n\n  const handleAutocompleteChange = (name: string, value: unknown) => {\n    const newValues = { ...values };\n    setValueAtKeyPath(newValues, name, value);\n    setValues(newValues);\n  };\n\n  const handleSubmit = async (event: FormEvent) => {\n    event.preventDefault();\n    setSubmitting(true);\n    setSubmitFeedback(\"\");\n    try {\n      // if there is no id, it means it is an add\n      if (data.id) {\n        await rest.submitUpdate(Number(data.id), values);\n      } else {\n        await rest.submitCreate(values);\n      }\n      setSubmitFeedback(\"Operation Successful\");\n      history.goBack();\n    } catch (e) {\n      setSubmitFeedback(\"Submission Error. \" + e.toString());\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {loading && <h3>Loading...</h3>}\n      <div style={{ textAlign: \"start\" }}>\n        {fields.map((field) => (\n          <div style={{ marginBlock: 12 }}>{renderField(field)}</div>\n        ))}\n      </div>\n      <div>\n        <Button secondary type=\"reset\" onClick={() => history.goBack()}>\n          Cancel\n        </Button>\n        <Button disabled={rest.isSubmitting} primary type=\"submit\">\n          Submit\n        </Button>\n      </div>\n      {fetchError && <h4>{fetchError}</h4>}\n      {submitFeedback && <p>{submitFeedback}</p>}\n    </form>\n  );\n}\n\nexport default withFormik<UpsertPageProps, Record<string, unknown>>({\n  handleSubmit() {},\n})(UpsertPage);\n\nexport interface UpsertPageProps {\n  dataFetcher: (id: number) => Promise<unknown>;\n  fields: FormField<unknown>[];\n  submitUpdate: (id: number, values: unknown) => Promise<unknown>;\n  submitCreate: (values: unknown) => Promise<unknown>;\n}\n\nexport interface FormField<T> {\n  label: string;\n  name: keyof T;\n  type: \"number\" | \"text\" | \"file\" | \"pointer\";\n  items?: () => Promise<unknown[]>;\n  itemText?: string;\n  itemValue?: string;\n}\n","import {\n  BrowserRouter,\n  Redirect,\n  Route,\n  Switch,\n  useParams,\n} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { Store } from \"../types/storeTypes\";\nimport { storeApi } from \"../api/storeApi\";\nimport Menu from \"../components/Menu/Menu\";\nimport TablePage from \"./TablePage\";\nimport { Container } from \"../components/Container\";\nimport {\n  categoryUpsertFields,\n  Model,\n  productUpsertFields,\n} from \"../utils/modelHelpers\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"../redux/store\";\nimport { setStore } from \"../redux/actions\";\nimport UpsertPage from \"./UpsertPage\";\nimport { categoryApi } from \"../api/categoryApi\";\nimport { productApi } from \"../api/productApi\";\nimport { Product } from \"types/productTypes\";\nimport { Category } from \"types/categoryTypes\";\n\nfunction StoreMain({ store, setStore }: ReduxProps) {\n  const [loading, setLoading] = useState(true);\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    const storeId = Number(id);\n    storeApi\n      .get(storeId)\n      .then((store) => setStore(store))\n      .finally(() => setLoading(false));\n  }, []);\n\n  return (\n    <>\n      <Menu />\n      <Container>\n        <Switch>\n          <Route\n            exact\n            path={\"/store/\" + store?.id + \"/categories\"}\n            render={() => <TablePage model={Model.category} />}\n          />\n          <Route\n            exact\n            path={\"/store/\" + store?.id + \"/products\"}\n            render={() => <TablePage model={Model.product} />}\n          />\n          <Route\n            path={\"*product-upsert/:id?\"}\n            render={() => (\n              <UpsertPage\n                dataFetcher={(id: number) => productApi.get(id)}\n                fields={productUpsertFields as never}\n                submitCreate={(values) => {\n                  return productApi.post(values as Product);\n                }}\n                submitUpdate={(id: number, values) => {\n                  return productApi.patch(id, values as Product);\n                }}\n              />\n            )}\n          />\n          <Route\n            path={\"*category-upsert/:id?\"}\n            render={() => (\n              <UpsertPage\n                dataFetcher={(id: number) =>\n                  // when there is no id, we provide an empty category object as initial values\n                  Number.isNaN(id)\n                    ? Promise.resolve({} as Category)\n                    : categoryApi.get(id)\n                }\n                fields={categoryUpsertFields as never}\n                submitCreate={(values) => {\n                  return categoryApi.post(values as Category);\n                }}\n                submitUpdate={(id: number, values) => {\n                  return categoryApi.patch(id, values as Category);\n                }}\n              />\n            )}\n          />\n          <Route path={\"/store/\" + store?.id}>\n            <Redirect to={\"/store/\" + store?.id + \"/products\"} />\n          </Route>\n        </Switch>\n      </Container>\n    </>\n  );\n}\n\nconst connector = connect(\n  (state: AppState) => ({ store: state.store }),\n  (dispatch) => ({\n    setStore: (store: Store) => dispatch(setStore(store)),\n  })\n);\n\ntype ReduxProps = ConnectedProps<typeof connector>;\n\nexport default connector(StoreMain);\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Switch, Route, Link } from \"react-router-dom\";\nimport Stores from \"./scenes/Stores\";\nimport StoreUpsert from \"./scenes/StoreUpsert\";\nimport StoreMain from \"./scenes/StoreMain\";\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Stores} />\n          <Route path=\"/upsert-store/:id?\" component={StoreUpsert} />\n          <Route path=\"/store/:id\" component={StoreMain} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}